Classes: (look in memory.py and experimental_gui.py)
Memory Class:
        The purpose of the memory class is to define the registers and define all the different operations performed from the different user inputs.
        Functions:
                Constructor: The purpose of the constructor is to create the core variables like the register, accumulator and pointer. The register is used to hold the different inputs from the user to do operations with. The accumulator is used as basically a temp variable that all operations are performed on and the pointer used for the branch holding the target memory location to branch to. The pre-conditions for this function is whenever a new Memory class is created. The post-conditions are the creation of the different variables and setting aside that memory.
	     clear: The purpose of clear is to make all registers equal to 0 and start fresh so a new file could be run without having anything leak over from past attempts. The pre-condition is usually when a new file is loaded in or the clear button is pressed in the program. The post-conditions are that all registers are reset to 0 and the program resets itself.
                readProgram: The purpose of this function is to read in the values from the file provided from the user. The parameter is file which is just the name of the file provided. The pre-condition for this function is it getting called directly and the post-conditions are that the user’s text file gets parsed into different lines and the first registers are filled by the “words” from the input.
                read: The purpose of this function is to take a “word” from the user and read it into a specified memory location. This function takes two parameters, the first is the memory location the value will get stored at and the second is the “word” that’s going to be stored in memory. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 10. The post-condition is that the specified memory location now holds the number assigned by the user.
                write: The purpose of this function is to write a “word” from a specified memory location and display it on the screen. This function takes one parameter which is the memory location the “word” is located at. This function will return the “word” in that memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 11. The post-condition is that the number in the specified memory location is printed to the screen.
                load: The purpose of this function is to load a “word” from a specified memory location into the accumulator. This function takes one parameter which is the memory location the “word” is located at. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 20. The post-condition is that the accumulator will be assigned the value that’s in the specified memory location.
                store: The purpose of this function is to store a “word” from the accumulator into a specified memory location. This function takes one parameter which is the memory location the “word” is located at. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 21. The post-condition is that the value in the specified memory location is assigned the value in the accumulator.
                add: The purpose of this function is to take a “word” from a memory location and add it to the accumulator. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 30. The post-condition is that the accumulator has increased by the amount in the memory location.
                subtract: The purpose of this function is to take a “word” from a memory location and subtract it from the accumulator. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 31. The post-condition is The post-condition is that the accumulator has decreased by the amount in the memory location.
                divide: The purpose of this function is to take a “word” from a memory location and divide it from the accumulator. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 32. The post-condition is that the accumulator is divided by the amount in the memory location.
                multiply: The purpose of this function is to take a “word” from a memory location and multiply it with the accumulator. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 33. The post-condition is that the accumulator is multiplied by the amount in the memory location.
                branch: The purpose of this function is to go to or branch to a specific spot in memory. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 40. The post-condition is that the program will redirect to the specified memory spot.
                branchneg: The purpose of this function is to go to or branch to a specific spot in memory when the accumulator is negative. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 41. The post-condition is that the program will redirect to the specified memory spot if the accumulator is negative.
                branchzero: The purpose of this function is to go to or branch to a specific spot in memory when the accumulator is negative. This function takes 1 parameter which is the specified memory location. The pre-condition for this function is being called by the user in their text file when the first two numbers of the line are 41. The post-condition is that the program will redirect to the specified memory spot when the accumulator is zero.
                inc_reg: The purpose of this function is to point the pointer to the next line from the user text file. The pre-condition for this function is after it’s called by the code usually after each operation runs. The post-condition is that the variable pointer will point 1 address forward.


UVSimGui Class: 
	The purpose of the UVSimGui class is to create the framework for the user interface. It creates a frame and also does functions to the text file provided by the user. It also handles calling the memory class to do functions specified by the user in their text file.
	Functions: 
		Constructor: The purpose of the constructor is to define the elements that will appear on the screen, such as labels, file input, and buttons. It has three parameters, the first is runner which is used to implement the memory class. The second (*args) is the positional arguments and the third is **kwargs which is used for keyword arguments.
		show_frame: the show frame function just takes the page name that’s passed to it and pushes it on top of everything else in the frame. The pre-condition is when the process starts up. The post-condition is that everything in the gui is put into place.
		clear: The clear function takes everything from the text area and clears it out. It also takes the file it was holding and deletes it from the program. The pre-condition is the file getting changed or the load button is pushed. The post-condition is that everything in the text area is cleared and clean.
		select_file: The select file function first clears the text area then allows the user to select a file from any file location to load into the text area. The pre-condition is when the user presses the select file button. The post-condition is that the file is selected to get loaded into the text area.
		load_file: Takes everything in the text area, deletes it and replaces it with the text from the user’s file. The pre-condition is that a new file is loaded into the program. The post-condition is that the new text from the file is put into the text area.
		save_file: The save file function uses save as to take the text in the text area and either save over an existing file or save as a new file. The pre-condition is that the save button is pushed. The post-condition is that the text from the text area gets saved as a local file.
		run_file: The run file function takes the text in the text area and uses the memory class to run the specified functions. The pre-condition is the user pressing the run button. The post-condition is the program running and the result being output on the screen.
		output: The output function prints the results of the program running the text file provided by the user. The pre-condition is the program being run and the post-condition is the result being output to the screen.
		popup: The popup function will show a popup for every user input required by the memory class. The user will then enter a 4 digit number to be used in the program. The pre-condition is when the functions that need input are called, the post-condition is that the number inputted would be used in different operations.
		invalid_input: Shows an error if an incorrect input was found in the text file.
		get_file: returns the file path to the file the user wants to run.

		
MainScreen class: 
Just defines all the buttons and things that appear on the main frame of UVSim. This includes all buttons and smaller frames.

Side Functions:
		update_primary_color: takes multiple different parameters to determine the color of the new screen. Changes the background of the screen and other defined primary colored objects.
		update_secondary_color: takes multiple different parameters to determine the color of the new screen. Changes the background of the screen and other defined secondary colored objects.
		to_hex: converts imputed rgb values to hex values.
		main: assigns runner, starts up the software and starts up mainloop.
